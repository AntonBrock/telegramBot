import json
from typing import Final
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, ConversationHandler

import re
import telegram.ext.filters as filters
import requests
import asyncio

API_TOKEN: Final = "6992266110:AAFk_o80XlXiF5mq1rszkx3IKu7RvICQXFQ"
BOT_NAME: Final = "@antony_life_ios_bot"
MY_TELEGRAM_ID = 222943251

CHOOSE_BUTTON, GET_ANSWER, GET_USER_FILE = range(3)
buttons = [
        ['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'],
        ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –ú–û–ö-—Å–æ–±–µ—Å–∞ –≤ —Ç–µ–ª–µ–≥–∞–º –∫–∞–Ω–∞–ª–µ üìÅ'],
        ['–ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ -40% –Ω–∞ –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã üõç', '–ë–ï–°–ü–õ–ê–¢–ù–´–ï –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–±–æ—Ç—ã üõí']
    ]

# Commands
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = buttons

    sticker_id = "CAACAgIAAxkBAAELqbJl7vEpnSYMHEYV9s7Vd4PkbTRnsAACezIAAidnQUsp7_EdgXn3gDQE"
    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ Antony o Life & iOS üëã\n"
        "–ù–∏–∂–µ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!\n\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É: anton.brock1@gmail.com\n–∏–ª–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: @antonbrock",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True
        ),
    )
    return CHOOSE_BUTTON

async def user_did_choose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == buttons[0][0]:
        await update.message.reply_text(
            "–Ø —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏ —è –µ–≥–æ"
        )

        sticker_id = "CAACAgIAAxkBAAELqall7u_xh5zmHBhoEQnQ18UoKWvZqQACFAADqobFInPSk7xSMXmkNAQ"
        await context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id)

        return GET_ANSWER
    elif text == buttons[1][0]:
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ - PDF üìÅ, —Å—Å—ã–ª–∫–∏ –ù–ï –Ω—É–∂–Ω—ã üîó"
        )
        return GET_USER_FILE
    elif text == buttons[2][0]:

        sticker_id = "CAACAgIAAxkBAAELqadl7u8ThnMd0n9b8ccoPKEk9ki9ygACFiMAAtqbMUmzoUB99tGPpzQE"
        await context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id)

        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤: SECRET_PROMO_BOT"
        )

        await asyncio.sleep(5)

        reply_keyboard = buttons
        await update.message.reply_text(
            "–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?\n–°–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–π CV –Ω—É –∏–ª–∏ –≤—ã—Å—ã–ª–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É üòé",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard, one_time_keyboard=True
            ),
        )
        return CHOOSE_BUTTON
    elif text == buttons[2][1]:
        await update.message.reply_text(
            "–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π WorkBook –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∫–∞–Ω–∞–ª–∞"
        )
        await context.bot.send_photo(chat_id=f"{update.message.chat_id}", photo=open('classVSStrucrsPreview.png', 'rb'), caption="225+ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π, 39+ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤, –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞, –æ—Ç–ª–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –ª–µ–≥–∫–∞—è –ø–æ–¥–∞—á–∞ —Ç–µ–æ—Ä–∏–∏! \n\nüî•–¢—ã –º–æ–∂–µ—à—å –∑–∞–±—Ä–∞—Ç—å –º–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç - Workbook \"Struct vs classes in Swift: –û—Ç–ª–∏—á–∏—è –∏ –∫–∞–∫ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å\" —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üöÄ")

        # –ö–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞
        list_of_buttons = ['–ó–∞–±—Ä–∞—Ç—å']
        list_of_urls = ["https://drive.google.com/file/d/1x03HusFQOW_Vs5_SSZcz6GBuOc7bneoW/view"]

        button_list = []
        for index, each in enumerate(list_of_buttons):
            button_list.append(InlineKeyboardButton(each, callback_data=each, url=list_of_urls[index]))
        reply_markup = InlineKeyboardMarkup(build_menu_for_free_product(button_list, n_cols=1))
        await context.bot.send_message(chat_id=update.message.chat_id, text="–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç GoogleDrive,\n–≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–∞—á–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º üôå", reply_markup=reply_markup)
    else:
        sticker_id = "CAACAgIAAxkBAAELqbpl7v1lS8P2t4X0CfIKCpIAAdOm2DQAAsNAAAItDThIjnlVjGJ6X-80BA"
        await context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id)

        await update.message.reply_text(
            "–Ø —Ç–∞–∫–æ–µ –Ω–µ –ø–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–π /start –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–Ω–µ @antonbrock"
        )

def build_menu_for_free_product(buttons,n_cols,header_buttons=None,footer_buttons=None):
      menu = [buttons[i:i + n_cols] for i in range(0, len(buttons), n_cols)]
      if header_buttons:
        menu.insert(0, header_buttons)
      if footer_buttons:
        menu.append(footer_buttons)
      return menu

async def send_text_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user_text
    user_input_text = update.message.text

    # info
    user_name = update.message.from_user.name
    user_full_name = update.message.from_user.full_name
    user_message_date = update.message.date
    user_chat_id = update.message.chat_id
    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={MY_TELEGRAM_ID}&text=\n\n–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï\n\n–ù–∏–∫–Ω–µ–π–º - {user_name},\n–ò–º—è - {user_full_name},\n–°–æ–æ–±—â–µ–Ω–∏–µ: \"{user_input_text}\",\n\n–î–∞—Ç–∞ - {user_message_date},\n–ß–ê–¢-ID: {user_chat_id}"

    await update.message.reply_text("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å, —è –µ–≥–æ –ø–æ–ª—É—á–∏–ª –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É –ª–∏–±–æ –≤ –õ–°,\n–ª–∏–±–æ –ø—Ä–∏—à–ª—é –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ —Å—é–¥–∞ üí™")

    # Send text and user info to admin
    requests.get(url).json()

    sticker_id = "CAACAgIAAxkBAAELqbRl7vHKYjfVzvNg4RIwKii8UhwWWwAC8ycAAljPEEmcQEs_PwABJSI0BA"
    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id)

    await asyncio.sleep(4)

    reply_keyboard = buttons
    await update.message.reply_text(
        "–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?\n–°–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–π CV –Ω—É –∏–ª–∏ –≤—ã—Å—ã–ª–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É üòé",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True
        ),
    )

    return CHOOSE_BUTTON

async def send_file_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user_data
    user_input_text = update.message.text
    user_name = update.message.from_user.name
    user_full_name = update.message.from_user.full_name
    user_message_date = update.message.date
    user_chat_id = update.message.chat_id

    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={MY_TELEGRAM_ID}&text=\n\n–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï - –ü–û–õ–£–ß–ï–ù –§–ê–ô–õ\n\n–ù–∏–∫–Ω–µ–π–º - {user_name},\n–ò–º—è - {user_full_name},\n\n–î–∞—Ç–∞ - {user_message_date},\n–ß–ê–¢-ID: {user_chat_id}"

    # Download file
    fileName = update.message.document.file_name
    new_file_id = update.message.document.file_id

    # Send file to admin
    await context.bot.send_document(chat_id=MY_TELEGRAM_ID, document=new_file_id)

    # Send file to admin
    requests.get(url).json()

    sticker_id = "CAACAgIAAxkBAAELqcNl7wSFBfK5h1GR73xQey14KumYCQACTB8AAuJquUp1p1IDqsnzrDQE"
    await context.bot.send_sticker(chat_id=update.message.chat_id, sticker=sticker_id)

    await update.message.reply_text("–ü–æ–ª—É—á–∏–ª! \n\n–°–ø–∞—Å–∏–±–æ, —è —Ä–∞–∑–±–µ—Ä—É —Ç–≤–æ–µ —Ä–µ–∑—é–º–µ –∏ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ –ø–æ–≤–æ–¥—É –ú–û–ö-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")

    await asyncio.sleep(4)

    reply_keyboard = buttons
    await update.message.reply_text(
        "–¢–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —á—Ç–æ-—Ç–æ –µ—â–µ?\n–°–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–π CV –Ω—É –∏–ª–∏ –≤—ã—Å—ã–ª–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É üòé",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True
        ),
    )

    return CHOOSE_BUTTON

async def send_free_promo_code_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–µ—Ä–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤: SECRET_PROMO_BOT')

async def send_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_string = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è chat_id –∏ message
    pattern = re.compile(r'chatID="(\d+)", message="([^"]+)"')

    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    match = pattern.search(message_string)

    chatID = 0
    messageToUser = ""
    if match:
        chat_id = match.group(1)
        chatID = chat_id

        message = match.group(2)
        messageToUser = message
    else:
        print("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    await context.bot.send_message(chat_id=chatID, text=messageToUser)
    await update.message.reply_text(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ \"{messageToUser}\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ ID{chatID} ')

# Responses
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Updated {update} error {context.error}')

async def send_note_for_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π: –∫–æ–º–∞–Ω–¥—É /send_answer chatID='ID, message='text\n\n"
        "–ü—Ä–∏–º–µ—Ä: /send_answer chatID='6271739171', message='hello'"
    )

async def cancel(update: Update):
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start –∫–æ–º–∞–Ω–¥—É ",
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END

## START
if __name__ == '__main__':
    print('starting bot')
    app = Application.builder().token(API_TOKEN).build()

    # Commands
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start_command)],
        states={
            CHOOSE_BUTTON: [
                MessageHandler(filters.ALL, user_did_choose)
            ],
            GET_ANSWER: [
                MessageHandler(filters.ALL, send_text_to_admin)
            ],
            GET_USER_FILE: [
                MessageHandler(filters.ALL, send_file_to_admin)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    app.add_handler(conv_handler)

    app.add_handler(CommandHandler('send_answer', send_message_to_user))
    app.add_handler(CommandHandler('admin_note', send_note_for_admin))

    # Error
    app.add_error_handler(error)

    # Polling
    app.run_polling(allowed_updates=Update.ALL_TYPES)

    ### –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–æ–∫ –∫–Ω–æ–ø–æ–∫
    # app.add_handler(CallbackQueryHandler(free_product_button_didTap))

    # async def free_product_button_didTap(update:Update, context:ContextTypes.DEFAULT_TYPE):
    #     query = update.callback_query
    #     await query.answer()
    #
    #     print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª: {query.data}")
    #     await context.bot.send_document(chat_id=update.callback_query.message.chat.id, document=open('structVsClassesWorkBookFile.pdf', 'rb'))