import json
from typing import Final
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, MessageHandler, CommandHandler, ContextTypes, ConversationHandler

import re
import telegram.ext.filters as filters
import requests

API_TOKEN: Final = "6992266110:AAFk_o80XlXiF5mq1rszkx3IKu7RvICQXFQ"
BOT_NAME: Final = "@antony_life_ios_bot"
MY_TELEGRAM_ID = 222943251

CHOOSE_BUTTON, GET_ANSWER, GET_USER_FILE = range(3)
buttons = [
        ['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ê–Ω—Ç–æ–Ω—É'],
        ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –ú–û–ö-—Å–æ–±–µ—Å–∞ –≤ —Ç–µ–ª–µ–≥–∞–º –∫–∞–Ω–∞–ª–µ üìÅ'],
        ['–ó–∞–±—Ä–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ -40% –Ω–∞ –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã üõç']
    ]

# Commands
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = buttons

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞ Antony o Life & iOS üëã "
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–µ–π—á–∞—Å?",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=False
        ),
    )
    return CHOOSE_BUTTON
async def user_did_choose(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    if text == buttons[0][0]:
        await update.message.reply_text(
            "–Ø —Ä–∞–¥, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –∂–¥—É –µ–≥–æ üëÄ"
        )
        return GET_ANSWER
    elif text == [0][1]:
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ - PDF üìÅ, —Å—Å—ã–ª–∫–∏ –ù–ï –Ω—É–∂–Ω—ã üîó"
        )
        return GET_USER_FILE
    elif text == [0][2]:
        # WARGING - DONT WORK CHECK KEY
        await update.message.reply_text("–ö–æ–Ω–µ—á–Ω–æ, –≤–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤: SECRET_PROMO_BOT")
async def send_text_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user_text
    user_input_text = update.message.text

    # info
    user_name = update.message.from_user.name
    user_full_name = update.message.from_user.full_name
    user_message_date = update.message.date
    user_chat_id = update.message.chat_id
    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={MY_TELEGRAM_ID}&text=\n\n–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï\n\n–ù–∏–∫–Ω–µ–π–º - {user_name},\n–ò–º—è - {user_full_name},\n–°–æ–æ–±—â–µ–Ω–∏–µ: \"{user_input_text}\",\n\n–î–∞—Ç–∞ - {user_message_date},\n–ß–ê–¢-ID: {user_chat_id}"

    await update.message.reply_text("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å, —è –µ–≥–æ –ø–æ–ª—É—á–∏–ª –∏ –æ—Ç–≤–µ—á—É –Ω–∞–ø—Ä—è–º—É—é –≤ –¢–ì üí™")
    await requests.get(url).json()

async def send_file_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # user_data
    user_input_text = update.message.text
    user_name = update.message.from_user.name
    user_full_name = update.message.from_user.full_name
    user_message_date = update.message.date
    user_chat_id = update.message.chat_id

    url = f"https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={MY_TELEGRAM_ID}&text=\n\n–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï\n\n–ù–∏–∫–Ω–µ–π–º - {user_name},\n–ò–º—è - {user_full_name},\n\n–î–∞—Ç–∞ - {user_message_date},\n–ß–ê–¢-ID: {user_chat_id}"

    # Download file
    fileName = update.message.document.file_name
    new_file_id = update.message.document.file_id

    # Send file to admin
    await context.bot.send_document(chat_id=MY_TELEGRAM_ID, document=new_file_id)
    await update.message.reply_text("–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —è —Ä–∞–∑–±–µ—Ä—É —Ç–≤–æ–µ —Ä–µ–∑—é–º–µ –∏ –≤–µ—Ä–Ω—É—Å—å —Å –æ—Ç–≤–µ—Ç–æ–º –ø–æ –ø–æ–≤–æ–¥—É –ú–û–ö-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è")

    # Send user info to admin
    await requests.get(url).json()
async def send_free_promo_code_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–î–µ—Ä–∂–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –í–°–ï–• –ø—Ä–æ–¥—É–∫—Ç–æ–≤: SECRET_PROMO_BOT')

async def send_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_string = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è chat_id –∏ message
    pattern = re.compile(r'chatID="(\d+)", message="([^"]+)"')

    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    match = pattern.search(message_string)

    chatID = 0
    messageToUser = ""
    if match:
        chat_id = match.group(1)
        chatID = chat_id

        message = match.group(2)
        messageToUser = message
    else:
        print("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    await context.bot.send_message(chat_id=chatID, text=messageToUser)
    await update.message.reply_text(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ \"{messageToUser}\" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –µ–≥–æ ID{chatID} ')

# Responses
async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Updated {update} error {context.error}')

async def cancel(update: Update):
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start –∫–æ–º–∞–Ω–¥—É ", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


## START
if __name__ == '__main__':
    print('starting bot')
    app = Application.builder().token(API_TOKEN).build()

    # Commands
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start_command)],
        states={
            CHOOSE_BUTTON: [
                MessageHandler(filters.ALL, user_did_choose),
            ],
            GET_ANSWER: [
                MessageHandler(filters.ALL, send_text_to_admin)
            ],
            GET_USER_FILE: [
                MessageHandler(filters.ALL, send_file_to_admin)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler('send_answer', send_message_to_user))

    # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /note —á—Ç–æ–±—ã –æ–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞–ª–∞ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è admin

    # app.add_handler(CommandHandler('sendquestion', send_question_command))
    # app.add_handler(CommandHandler('sendrequest', send_request_command))
    # app.add_handler(CommandHandler('getfreepromocode', send_free_promo_code_command))

    # Error
    app.add_error_handler(error)

    # Polling
    print('Polling')
    app.run_polling(allowed_updates=Update.ALL_TYPES)
